`timescale 10ns/1ns 
module alu(x,y,z,sign,zero,carry,parity,overflow);
input [15:0] x,y;
output [15:0] z;
output sign,zero,carry,parity,overflow;
wire c[3:1];
//assign {carry,z}=x+y;
assign sign=z[15];
assign zero=~|z;
assign parity=~^z;
assign overflow=( (x[15]&y[15]&~z[15]) | (~x[15]&~y[15]&z[15]));
adder4 A0(z[3:0],c[1],x[3:0],y[3:0],1'b0);
adder4 A1(z[7:4],c[2],x[7:4],y[7:4],c[1]);
adder4 A2(z[11:8],c[3],x[11:8],y[11:8],c[2]);
adder4 A3(z[15:12],carry,x[15:12],y[15:12],c[3]);
endmodule

/*module adder4(sum,cout,a,b,cin);
input [3:0] a,b;
input cin;
output [3:0] sum;
output cout;
wire c1,c2,c3;
//assign {cout,sum}=a+b+cin;
fulladder F0(sum[0],c1,a[0],b[0],cin);
fulladder F1(sum[1],c2,a[1],b[1],c1);
fulladder F2(sum[2],c3,a[2],b[2],c2);
fulladder F3(sum[3],cout,a[3],b[3],c3);
endmodule

module fulladder(s,carryout,in1,in2,carryin);
input in1,in2,carryin;
output s,carryout;
wire t0,t1,t2; 
//assign s=(in1^in2^carryin);
//assign carryout=((in1 & in2)|(in2 & carryin)|(in1 & carryin));
xor x1(t0,in1,in2);
xor x2(t1,t0,carryin);
and a0(t2,in1,in2);
and a1(t3,in2,carryin);
and a2(t4,in1,carryin);
or  o1(carryout,t2,t3,t4);
xor g1(t0,in1,in2),g2(s,t0,carryin),g3(carryout,t1,t2);
and g4(t1,in1,in2),g5(t2,t0,carryin);
endmodule*/

module adder4(s,cout,a,b,cin);
input [3:0] a,b;
input cin;
output [3:0] s;
output cout;
wire p0,p1,p2,p3,g0,g1,g2,g3;
wire c1,c2,c3;
assign p0=a[0]^b[0], p1=a[1]^b[1], p2=a[2]^b[2], p3=a[3]^b[3];
assign g0=a[0]&b[0], g1=a[1]&b[1], g2=a[2]&b[2], g3=a[3]&b[3];
assign c1=g0|(p0 & cin),c2=g1|(p1&g0)|(p1&p0&cin),c3=g2|(p2&g1)|(p2&p1&g0)|(p2&p1&p0&cin),
        cout=g3|(p3&g2)|(p3&p2&g1)|(p3&p2&p1&g0)|(p3&p2&p1&p0&cin);
assign s[0]=p0^cin,
       s[1]=p1^c1,
	   s[2]=p2^c2,
	   s[3]=p3^c3;
endmodule